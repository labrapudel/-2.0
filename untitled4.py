# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BwXJG_g3AoeoWAoUsh7_rsk2TEXgi7f_
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from scipy import stats
import numpy as np

# Загрузка данных в "широком" формате
data = pd.read_csv('TCGA_PRAD_Clinical_Data.csv')

# Транспонирование DataFrame (строки ↔ столбцы)
data = data.set_index('attrib_name').T

# Проверка результата
print(data.head())
print("\nДоступные атрибуты:", data.columns.tolist())

# Преобразование данных
data['Tumor_purity'] = data['Tumor_purity'].astype(float)
data['overall_survival'] = pd.to_numeric(data['overall_survival'], errors='coerce')

from lifelines import KaplanMeierFitter
import matplotlib.pyplot as plt

# Предварительная обработка данных
# Убедимся, что столбцы имеют правильный тип данных
data['overall_survival'] = pd.to_numeric(data['overall_survival'], errors='coerce')
data['status'] = pd.to_numeric(data['status'], errors='coerce')

# Создаем бинарную переменную для чистоты опухоли
data['high_purity'] = data['Tumor_purity'] > data['Tumor_purity'].median()

# Удаляем строки с пропущенными значениями в ключевых столбцах
survival_data = data.dropna(subset=['overall_survival', 'status', 'high_purity'])

# Проверяем количество оставшихся наблюдений
print(f"Доступно наблюдений для анализа: {len(survival_data)}")

# Создаем график
plt.figure(figsize=(12, 6))

# Инициализируем оценщик Каплана-Мейера
kmf = KaplanMeierFitter()

# Строим кривые для каждой группы
for name, grouped in survival_data.groupby('high_purity'):
    kmf.fit(
        durations=grouped['overall_survival'],
        event_observed=grouped['status'],
        label=f"Чистота {'высокая' if name else 'низкая'}"
    )
    kmf.plot_survival_function(ci_show=True)  # Добавляем доверительные интервалы

# Добавляем легенду и оформление
plt.title("Кривые выживаемости Каплана-Мейера\nпо уровню чистоты опухоли", pad=20)
plt.xlabel("Дни наблюдения", fontsize=12)
plt.ylabel("Вероятность выживаемости", fontsize=12)
plt.grid(True, alpha=0.3)
plt.ylim(0, 1.05)

# Добавляем p-value лог-ранг теста
from lifelines.statistics import logrank_test

high_purity = survival_data[survival_data['high_purity']]
low_purity = survival_data[~survival_data['high_purity']]

results = logrank_test(
    high_purity['overall_survival'],
    low_purity['overall_survival'],
    high_purity['status'],
    low_purity['status']
)

plt.text(0.5, 0.2, f'Log-rank test p-value: {results.p_value:.4f}',
         ha='center', va='center',
         bbox=dict(facecolor='white', alpha=0.8))

plt.tight_layout()
plt.savefig('kaplan_meier_plot.png', dpi=300, bbox_inches='tight')
plt.show()