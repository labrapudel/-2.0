# -*- coding: utf-8 -*-
"""Gipoteza2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/134WVtLmCA5yThNAKqPOVt9abFY5bvf00

# Проведения гипотезы с данными

Некоторые miRNA (микроРНК) обладают прогностической ценностью при раке предстательной железы и позволяют предсказывать прогрессию заболевания, в частности, наличие метастазов в лимфатические узлы.
"""

import pandas as pd

# Load the uploaded files
clinical_path = "clinical.tsv"
mirna_path = "mirna.tsv"

# Read the TSV files
clinical_df = pd.read_csv(clinical_path, sep='\t')
mirna_df = pd.read_csv(mirna_path, sep='\t')

# Show the first few rows of both datasets
clinical_df.head(), mirna_df.head()

# Транспонируем клинические данные: атрибуты станут колонками
clinical_df_t = clinical_df.set_index("attrib_name").T

# Оставим только поле N-стадии (метастазы в лимфоузлы)
clinical_df_t["pathology_N_stage"] = clinical_df_t["pathology_N_stage"].str.lower()

# Преобразуем в бинарную метку: n0 -> 0, n1 -> 1
clinical_df_t["lymph_metastasis"] = clinical_df_t["pathology_N_stage"].map({"n0": 0, "n1": 1})

# Удалим записи без метки
clinical_df_filtered = clinical_df_t.dropna(subset=["lymph_metastasis"])
clinical_df_filtered["lymph_metastasis"] = clinical_df_filtered["lymph_metastasis"].astype(int)

# Пациенты в mirna_df имеют тот же формат ID — ограничим его до общих пациентов
common_patients = set(clinical_df_filtered.index).intersection(mirna_df.columns[1:])
mirna_filtered = mirna_df[["attrib_name"] + list(common_patients)]
mirna_filtered = mirna_filtered.set_index("attrib_name").T

# Присоединяем метки к данным miRNA
mirna_filtered["lymph_metastasis"] = clinical_df_filtered.loc[mirna_filtered.index, "lymph_metastasis"]

mirna_filtered.head()

from scipy.stats import mannwhitneyu
import numpy as np

# Отделим метки и признаки
X = mirna_filtered.drop(columns="lymph_metastasis")
y = mirna_filtered["lymph_metastasis"]

# Сохраним p-values по каждой miRNA
results = []
for mirna in X.columns:
    group0 = X[y == 0][mirna]
    group1 = X[y == 1][mirna]

    # Применим U-критерий Манна–Уитни
    stat, p = mannwhitneyu(group0, group1, alternative='two-sided')
    results.append((mirna, p))

# Сортировка по значимости
results_sorted = sorted(results, key=lambda x: x[1])
top_mirnas = results_sorted[:10]

top_mirnas

# Транспонирование клинических данных
clinical_df_t = clinical_df.set_index("attrib_name").T
clinical_df_t["pathology_N_stage"] = clinical_df_t["pathology_N_stage"].str.lower()
clinical_df_t["lymph_metastasis"] = clinical_df_t["pathology_N_stage"].map({"n0": 0, "n1": 1})
clinical_df_t = clinical_df_t.dropna(subset=["lymph_metastasis"])
clinical_df_t["lymph_metastasis"] = clinical_df_t["lymph_metastasis"].astype(int)

# Совмещение с miRNA
common_patients = set(clinical_df_t.index).intersection(mirna_df.columns[1:])
mirna_filtered = mirna_df[["attrib_name"] + list(common_patients)].set_index("attrib_name").T
mirna_filtered["lymph_metastasis"] = clinical_df_t.loc[mirna_filtered.index, "lymph_metastasis"]

# Анализ Mann-Whitney
X = mirna_filtered.drop(columns="lymph_metastasis")
y = mirna_filtered["lymph_metastasis"]
results = []

for mirna in X.columns:
    group0 = X[y == 0][mirna]
    group1 = X[y == 1][mirna]
    stat, p = mannwhitneyu(group0, group1, alternative='two-sided')
    results.append((mirna, p))

# Топ-10 значимых miRNA
top_mirnas = sorted(results, key=lambda x: x[1])[:10]

# Построение boxplot
sns.set(style="whitegrid")
plt.figure(figsize=(20, 12))

for i, (mirna, pval) in enumerate(top_mirnas, 1):
    plt.subplot(2, 5, i)
    sns.boxplot(x=mirna_filtered["lymph_metastasis"], y=mirna_filtered[mirna])
    plt.title(f"{mirna}\n(p = {pval:.1e})")
    plt.xlabel("Метастазы в ЛУ (0 = нет, 1 = есть)")
    plt.ylabel("Экспрессия")

plt.tight_layout()
plt.show()

from sklearn.decomposition import PCA
import matplotlib.pyplot as plt

pca = PCA(n_components=2)
components = pca.fit_transform(X)

plt.figure(figsize=(8, 6))
sns.scatterplot(x=components[:, 0], y=components[:, 1], hue=y, palette="Set1")
plt.title("PCA по miRNA экспрессии")
plt.xlabel("PC1")
plt.ylabel("PC2")

from sklearn.metrics import roc_curve, auc

mirna_name = "hsa-mir-21"
fpr, tpr, _ = roc_curve(y, X[mirna_name])
roc_auc = auc(fpr, tpr)

plt.plot(fpr, tpr, label=f'{mirna_name} (AUC = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], 'k--')
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC-кривая")
plt.legend()

import seaborn as sns

top_mirna_names = [m[0] for m in top_mirnas]
heat_data = mirna_filtered[top_mirna_names].copy()
heat_data["metastasis"] = y
heat_data = heat_data.sort_values("metastasis")

sns.clustermap(heat_data[top_mirna_names], cmap="vlag", figsize=(10, 8), col_cluster=False)